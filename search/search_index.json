{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"18738 Engineering Embedded Systems For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#18738-engineering-embedded-systems","text":"For full documentation visit mkdocs.org .","title":"18738 Engineering Embedded Systems"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"coursehardware/","text":"Course Hardware Discovery STM32F3VCT6 link to purchasing overview of hardware capabilities applicability to the course Documentation for the Discovery Board TODO: Getting Started Cables Connecting the Board","title":"Course Hardware"},{"location":"coursehardware/#course-hardware","text":"","title":"Course Hardware"},{"location":"coursehardware/#discovery-stm32f3vct6","text":"link to purchasing overview of hardware capabilities applicability to the course","title":"Discovery STM32F3VCT6"},{"location":"coursehardware/#documentation-for-the-discovery-board","text":"TODO:","title":"Documentation for the Discovery Board"},{"location":"coursehardware/#getting-started","text":"Cables Connecting the Board","title":"Getting Started"},{"location":"statemachines/","text":"Relevant Links - required literature reading Types of State Machines HSM - Heirarchichal State Machines FSM - Finite State Machine Background What are state machines Linking state machines to the behavior of contolled objects Linking state machines to events and time Processes, Transitions, and Constraints Design Guidance Changes in enviornment state Needed behavioral changes in the application Example: Elements in a State Machine Activities State Transitions Modeling State Machines Modeling techniques for State Machines State Diagrams, State Charts UML SysML Example for State Machine Implementations Implementing State Machines if/else state machine Code Snippet Compiled Properties assembly Pros/Cons switch/case state machine Code Snippet Complied Properties assembly Pros/Cons function pointer state machine Code Snippet Compiled Properties assembly Discussion of Types","title":"State Machines"},{"location":"statemachines/#types-of-state-machines","text":"HSM - Heirarchichal State Machines FSM - Finite State Machine","title":"Types of State Machines"},{"location":"statemachines/#background","text":"What are state machines Linking state machines to the behavior of contolled objects Linking state machines to events and time Processes, Transitions, and Constraints","title":"Background"},{"location":"statemachines/#design-guidance","text":"Changes in enviornment state Needed behavioral changes in the application Example:","title":"Design Guidance"},{"location":"statemachines/#elements-in-a-state-machine","text":"Activities State Transitions","title":"Elements in a State Machine"},{"location":"statemachines/#modeling-state-machines","text":"Modeling techniques for State Machines State Diagrams, State Charts UML SysML","title":"Modeling State Machines"},{"location":"statemachines/#example-for-state-machine-implementations","text":"","title":"Example for State Machine Implementations"},{"location":"statemachines/#implementing-state-machines","text":"if/else state machine Code Snippet Compiled Properties assembly Pros/Cons switch/case state machine Code Snippet Complied Properties assembly Pros/Cons function pointer state machine Code Snippet Compiled Properties assembly","title":"Implementing State Machines"},{"location":"statemachines/#discussion-of-types","text":"","title":"Discussion of Types"},{"location":"syllabus/","text":"Course Description This course will introduce students to the design and implementation of sensor-based systems within an embedded systems context. The course's major components are design documentation and C based implementation based on that design. Throughout the course we will be discussing different design notions and study the workings of sensors, embedded systems, and wireless sensor nodes. Prior Knowledge Students taking this course should have some prior experience with IoT or embedded devices, but it isn\u2019t a hard prerequisite. Having hobbyist or classroom experience working with Arduino or Raspberry PI is beneficial but a prerequisite. The course has significant programming components, requiring writing C code compiled on the gcc compiler. The class will require proficiency with C/C++ to succeed. No prior knowledge of sensors or wireless systems is necessary. Learning Objectives After completing this course, you will be able to: \u2022 Design system pieces using standard graphical notation in documentation as well as documenting code \u2022 Build (code) parts of sensor based embedded systems from previously designed elements \u2022 Evaluate the effectiveness of software designs in guiding software implementations","title":"About"},{"location":"syllabus/#course-description","text":"This course will introduce students to the design and implementation of sensor-based systems within an embedded systems context. The course's major components are design documentation and C based implementation based on that design. Throughout the course we will be discussing different design notions and study the workings of sensors, embedded systems, and wireless sensor nodes.","title":"Course Description"},{"location":"syllabus/#prior-knowledge","text":"Students taking this course should have some prior experience with IoT or embedded devices, but it isn\u2019t a hard prerequisite. Having hobbyist or classroom experience working with Arduino or Raspberry PI is beneficial but a prerequisite. The course has significant programming components, requiring writing C code compiled on the gcc compiler. The class will require proficiency with C/C++ to succeed. No prior knowledge of sensors or wireless systems is necessary.","title":"Prior Knowledge"},{"location":"syllabus/#learning-objectives","text":"After completing this course, you will be able to: \u2022 Design system pieces using standard graphical notation in documentation as well as documenting code \u2022 Build (code) parts of sensor based embedded systems from previously designed elements \u2022 Evaluate the effectiveness of software designs in guiding software implementations","title":"Learning Objectives"}]}